18. Imprime la Respuesta entre comillas.

21. Las comillas simples no interpreta valores interiores, para ello necesita de comillas dobles.

22. Usar %q equivale a usar comillas simples, por lo que el texto que aparezca entre llaves se muestra literalmente, mientras que con %Q, interpreta el codigo en su interior.

	2.0.0p247 :001 > a = %q{helo world\n}
	 => "helo world\\n" 
	2.0.0p247 :002 > b=%Q{Hello World\n}
	 => "Hello World\n" 
	2.0.0p247 :003 > puts a
	helo world\n
	 => nil 
	2.0.0p247 :004 > puts b
	Hello World
	 => nil 
24. En c queda reflejado el contenido de la rutina HERE,  interpretandolo.
	=> "--4--\n--2--\n" 

25. En c queda reflejado el contenido de la rutina HERE, sin interpretar.
	=> "--\#{a}--\n--\#{b}--\n"

26. El valor de las siguientes expresiones:
	s[0,2]  => "he"
	s[-1,1] => "o"
	s[0,10] => "hello"
27. En g queda el resultado de concatenar "hello" con " world"

28. Es el resultado de realizar un bucle de tres iteraciones con el valor '.'

 	=> "..." 

29.  Escribe el valor entrecomillado, interpretado, tres veces.
	 => "2 2 2 " 

30. Crea un array de Words, donde cada palabra separada por espacio, se interpreta como una cadena independiente.

31. Crea nuevamente otro array, aunque en este caso sucede lo mismo que en una anterior pregunta, donde se traduce literlanmente lo escrito entre corchetes.

32. Crea nuevamente otro array, aunque en este caso sucede lo mismo que en una anterior pregunta, donde se interpreta lo escrito entre corchetes.

33. Contiene nils tantas veces como especificamos en el valor del array. 
	=> [nil, nil, nil]
 
34. Crea un Array de 3 espacios relleno de 0.
	=> [0, 0, 0]

35. Crea un array de enteros con el valor de x, ponde cada numero viene separado en filas.
	1
	2
	3
	4
36. Crea una Array de 3 enteros, donde cada espacio viene relleno con el valor de multiplicar 2 por el valor del iterador i.
	=> [0, 2, 4]

37. Lo que hace el método .to_a es establecer el rango de valores como un array. En la llamada a dicho array se le pasan distintos rangos para que muestre. Con dos puntos entre medio, significa que se incluyen los dos valores. Con tres puntos en medio significa que no se incluye el valor superior del rango.

	>> a = (’a’..’e’).to_a
	=> ["a", "b", "c", "d", "e"]
	>> a[1,1]
	=> ["b"]
	>> a[-2,2]
	=> ["d", "e"]
	>> a[0..2]
	=> ["a", "b", "c"]
	>> a[0...1]
	=> ["a"]
	>> a[-2..-1]
	=> ["d", "e"]

38. Al asignarle a: a valores para poner en las posiciones del array que corresponden, estos se insertan en dichas posiciones o en dichos rangos de posiciones.

	>> a
	=> ["a", "b", "c", "d", "e"]
	>> a[0,2] = %w{A B}
	=> ["A", "B"]
	>> a
	=> [“A”, “B”, “c”, “d”, “e”]
	>> a[2..5] = %w{C D E}
	=> ["C", "D", "E"]
	>> a
	=> ["A", "B", "C", "D", "E"]
	>> a[0,0] = [1,2,3]
	=> [1, 2, 3]
	>> a
	=> [1, 2, 3, "A", "B", "C", "D", "E"]
	>> a[0,2] = []
	=> []
	>> a
	=> [3, "A", "B", "C", "D", "E"]
	>> a[-1,1] = [ ’Z’ ]
	=> ["Z"]
	>> a
	=> [3, "A", "B", "C", "D", "Z"]
	>> a[-2,2] = nil
	=> nil
	>> a
	=> [3, "A", "B", "C"]
39. 
	>> a = (1...4).to_a
	=> [1, 2, 3]
	>> a = a + [4, 5]
	=> [1, 2, 3, 4, 5]
	>> a += [[6, 7, 8]]
	=> [1, 2, 3, 4, 5, [6, 7, 8]]
	>> a = a + 9
	TypeError: can't convert Fixnum into Array
	from (irb):4:in `+'
	from (irb):4
	from /usr/bin/irb:12:in `<main>'
40.
	>> x = %w{a b c b a}
	=> ["a", "b", "c", "b", "a"] 
	>> x = x - %w{b c d}	
	=> ["a", "a"]
41.
	>> z = [0]*8
	=> [0, 0, 0, 0, 0, 0, 0, 0]
42.
	>> a = []
	=> []
	>> a << 1
	=> [1]
	>> a << 2 << 3
	=> [1, 2, 3]
	>> a << [4, 5, 6]
	=> [1, 2, 3, [4, 5, 6]]
	>> a.concat [7, 8]
	=> [1, 2, 3, [4, 5, 6], 7, 8]
43. 
	>> a = [1, 1, 2, 2, 3, 3, 4]
	=> [1, 1, 2, 2, 3, 3, 4]
	>> b = [5, 5, 4, 4, 3, 3, 2]
	=> [5, 5, 4, 4, 3, 3, 2]
	>> c = a | b
	=> [1, 2, 3, 4, 5]
	>> d = b | a
	=> [5, 4, 3, 2, 1]
	>> e = a & b
	=> [2, 3, 4]
	>> f = b & a
	=> [4, 3, 2]
44. 
	>> a = 1..10
	=> 1..10
	>> a.class
	=> Range
	>> a.to_a
	=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
	>> b = 1...10
	=> 1....10
	>> b.to_a
	=> [1, 2, 3, 4, 5, 6, 7, 8, 9]
	>> b.include? 10
	=> false
	>> b.include? 8
	=> true
	>> b.step(2) {|x| print "#{x} " }
	1 3 5 7 9 => 1...10
	>> 1..3.to_a
	NoMethodError: undefined method `to_a' for 3:Fixnum
		from (irb):9
		from /usr/bin/irb:12:in `<main>'
45.

	>> r = 0...100
	=> 0....100
	>> r.member? 50
	=> true
	>> r.include? 99.9
	=> true
	>> r.member? 99.9
	=> true
46. 
	>> true.class
	=> TrueClass
	>> false.class
	=> FalseClass
	>> puts "hello" if 0
	hello
	=> nil
	>> puts "hello" if nil
	=> nil
	>> puts "hello" if ""
	(irb):5: warning: string literal in condition
	hello
	=> nil
47.
	>> x = :sym
	=> :sym
	>> x.class
	=> Symbol
	>> x == ’sym’
	=> false
	>> x == :sym
	=> true
	>> z = :’a long symbol’
	=> :"a long symbol"
	>> z.class
	=> Symbol
	>> x == ’sym’.to_sym
	=> true
	>> x.to_s == ’sym’
	=> true
48.
	>> s = "Ruby"
	=> "Ruby"
	>> t = s
	=> "Ruby"
	>> t[-1] = ""
	=> ""
	>> print s
	>> t = "Java"
	=> "Java"
	>> print s, t

	Print S -> Rub=> nil
	Print S, T -> RubJava=> nil

49. 
	>> "%d %s" % [3, "rubies"]
	=> "3 rubies"
50. 
	>> x, y = 4, 5
	=> [4, 5]
	>> z = x > y ? x : y
	=> 5
	>> x,y,z = [1,2,3]
	=> [1, 2, 3]
51. 

	>> x = { :a => 1, :b => 2 }
	=> {:b=>2, :a=>1}
	>> x.keys
	=> [:a, :b]
	>> x.values
	=> [1, 2]
	>> x[:c] = 3
	=> 3
	>> x
	=> {:a=>1, :b=>2, :c=>3}
	>> x.delete(’a’)
	=> nil
	>> x
	=> {:a=>1, :b=>2, :c=>3}
	>> x.delete(:a)
	=> 1
	>> x
	=> {:b=>2, :c=>3}
	>> x = { :a => 1, :b => 2, :c => 4 }
	=> {:b=>2, :c=>4, :a=>1}
	>> x.delete_if { |k,v| v % 2 == 0 }
	=> {:a=>1}
	>> x
	=> {:a=>1}
52. Puesto tal cual no realizaría ninguna funcion ya que la funcion yield salta a un bloque de código, pero en caso de ser definido con anterioridad, realizaría la opcion marcada en el bloque, seguida de un print de 4 5

53. Hace que el hash counts se inicialize a 0. La diferencia es que con esta sentencia el hash se inicializa a nil.

54. El comando 'hello world, hello LPP'.scan /\w+/ nos retorna el siguiente array ["hello", "world", "hello", "LPP"].

55.	
	c = { :a => 3, :b => 2, :c => 1 } -> Asigna valores  
	c.keys.sort.each { |k| puts c[k] } -> Muestra las asignaciones a los valores



